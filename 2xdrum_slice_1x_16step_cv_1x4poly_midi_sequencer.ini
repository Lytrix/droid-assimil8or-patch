# 2 CV Drum slicer + 1 3CV 16 step + 1 4 Poly Midi Sequencers

# This Droid patch creates 4 sequencers.
# 2 Drum slice sequencers for slicing and sequencing a 1 bar drum loop on Assimil8or using a M4.
# One 16 step Sequencer like the Verbos Multistage with an additional CV track ALT_CV
# One 4 polyphony midi sequencer.
# 
# 
# The Drum silce sequencers provides 8/16/32 slices (selectable via a switch) of a 1 bar drumloop using the M4 notches to select a sample start for each of the 16 steps and additionally the rand cv, gate prob, ratchets, velocity, pitch and timing for creating grooves on 4 repeating 16th clock ticks.
# 
# Using the MENU you can record 2 faders: autoreset and pattern changes on the fly by hitting record and selecting the length of the recording with the rotary knob.
# 
# Each sequencer has 4 presets where a sequence can be stored in.
# 
# When you hit record, you can record your button switches between presets using the record.
# 
# You can switch between the sequence or manual mode, similar as the ER101.

# INPUTS:
#  I1: [KB GT]
#  I2: [KB CV]
#  I3: [GT Len]
#  I4: [CLK IN]

# OUTPUTS:
#  O1: [PTCH1]
#  O2: [SLC1]
#  O4: [CV ALT]
#  O5: [PTCH2]
#  O6: [SLC2]
#  O8: [MSTAGE]

# GATES ON X7:
#  G1: [GATE1]
#  G2: [GATE2]
#  G3: [GATE3]
#  G7: [GT REC]
#  G8: [CLK GT]

# GATES ON G8 1:
#  G1.1: [GTE1]
#  G1.2: [GTE2]
#  G1.7: [RESET]
#  G1.8: [CLOCK]

# CONTROLLER 1:
#  P1.1: [CLOCK]
#  P1.2: [TRANSPOSE]
#  P1.3: [ROOT]
#  P1.4: [DEGREE]

# CONTROLLER 2:
#  P2.1: [GATELEN]
#  P2.2: [AUTORST]
#  P2.3: [PATTERN]
#  P2.4: [CLKDIV]

# CONTROLLER 3:
#  S3.1: [BAR LENGTH] 1/2/4/8/32/64/128 bars
#  S3.2: [REC BNK/WAVE] Select multible banks of preset recordings
#  S3.3: [8/16/32] Number of Slices SQ1
#  S3.5: [8/16/32] Number of Slices SQ2
#  S3.6: [V div] Main CV divider 0-5V
#  S3.7: [BYPASS] bypass Midi recording
#  S3.10: [SQ/MAN] Turn of preset recording

# CONTROLLER 4:
#  B4.1: [SLICE]
#  B4.2: [RND CV]
#  B4.3: [PROB]
#  B4.4: [RAT/LEN]
#  B4.5: [PRESET1]
#  B4.6: [P 2]
#  B4.7: [P 3]
#  B4.8: [P 4]
#  B4.9: [REC_PT1]
#  B4.10: [PT2]
#  B4.11: [PT3]
#  B4.12: [PT4]
#  B4.13: [STEP 1]
#  B4.14: [2]
#  B4.15: [3]
#  B4.16: [4]
#  B4.17: [COPY]
#  B4.18: [PASTE]
#  B4.19: [PASTE_F]
#  B4.20: [FORM]
#  B4.21: [MUTE 1]
#  B4.22: [MUTE 2]
#  B4.23: [MUTE 3]
#  B4.24: [MUTE 4]
#  B4.25: [SQ1]
#  B4.26: [SQ2]
#  B4.27: [SQ3]
#  B4.28: [SQ4]
#  B4.29: [RESET]
#  B4.30: [PLAY]
#  B4.31: [REC]
#  B4.32: [SET LEN]

# CONTROLLER 5:
#  B5.1: [ALT_CV]
#  B5.2: [MOD/SLW]
#  B5.3: [PIT/LEN]
#  B5.4: [TIMING]
#  B5.5: [MUT_CV]
#  B5.6: [MUT_SL]
#  B5.7: [MUT_GT]
#  B5.8: [MENU]
#  B5.9: [PT5]
#  B5.10: [PT6]
#  B5.11: [PT7]
#  B5.12: [PT8]
#  B5.13: [5]
#  B5.14: [6]
#  B5.15: [7]
#  B5.16: [8]
#  B5.29: [STP1-8] Select fader steps
#  B5.30: [9-16]
#  B5.31: [17-24]
#  B5.32: [25-32]

# CONTROLLER 6:
#  B6.1: [NUDGE]
#  B6.2: [-+]

[m4]
[m4]
[s10]
[b32]
[b32]
[p4b2]

# -------------------------------------------------
# GLOBAL SETTINGS
# -------------------------------------------------

[droid]
    ledbrightness = 0.5
    m4notchpower = 0.1

# -------------------------------------------------
# MIDI
# -------------------------------------------------

# Get the incoming MIDI clock via USB
[midiin]
    usb = 1
    clock = _MIDI_USB_CLOCK
    start = _MIDI_USB_IN_RESET

# This circuit detects an incoming MIDI clock via USB. If the clock signal is active at least once every two seconds,
# we give the MIDI clock precedence over the internal clock.
[clocktool]
    clock = _MIDI_USB_CLOCK
    gatelength = 2
    output = _MIDI_USB_CLOCK_PRESENT

# Get the incoming MIDI clock via TRS
[midiin]
    usb = 0
    clock = _MIDI_DIN_CLOCK
    start = _MIDI_DIN_IN_RESET

# we give the MIDI clock precedence over the internal clock.
[clocktool]
    clock = _MIDI_DIN_CLOCK
    gatelength = 2
    output = _MIDI_DIN_CLOCK_PRESENT

# -------------------------------------------------
# CLOCKS
# -------------------------------------------------

# LFO for internal clock
# The pulse width is super short so that a clock reset will immediately take effect
[lfo]
    rate = _SET_TEMPO * 0.5
    sync = _RESET
    square = _MAIN_CLOCK
    pulsewidth = 0.1

# Create a number for the clock to use
[mixer]
    input1 = _MIDI_USB_CLOCK_PRESENT * 1
    input2 = _MIDI_DIN_CLOCK_PRESENT * 2
    output = _MIDI_CLOCK_SWITCH

# Select the clock to use. If both MID clocks are present, the clock switch is 3.
# In this case we use the USB MIDI clock.
[switch]
    input1 = _MAIN_CLOCK
    input2 = _MIDI_USB_CLOCK
    input3 = _MIDI_DIN_CLOCK
    input4 = _MIDI_USB_CLOCK
    offset = _MIDI_CLOCK_SWITCH
    output1 = N4

# Beatstep Pro Clock in
# [copy]
#   input = G1.5
#   output = _MAIN_CLOCK

[button]
    button = B5.8
    onvalue = 1
    offvalue = 0
    led = L5.8

# X4
# [clocktool]
#   divide = 4
#   clock = _MAIN_CLOCK
#   reset = B4.29
#   output = _CLOCK_BEAT

# 1/32
# [clocktool]
#   multiply = 0.5
#   clock = _MAIN_CLOCK
#   reset = B4.29
#   output = _CLOCK_32TH

# 1/16
[clocktool]
    multiply = 1
    clock = _MAIN_CLOCK
    reset = _RESET
    output = _CLOCK_16TH

# 1/8
# [clocktool]
#   divide = 2
#   clock = _MAIN_CLOCK
#   reset = B4.29
#   output = _CLOCK_8TH

# 1/4
[clocktool]
    dutycycle = 0.5
    divide = 4
    clock = _MAIN_CLOCK
    reset = _RESET
    output = _CLOCK_4TH

# [lfo]
#   waveform = S3.2
#   hz = 20 * _SET_TEMPO
#   level = 1
#   bipolar = 0
#   square = _MAIN_CLOCK

[clocktool]
    clock = _SQ3_CLOCK_TIMING
    multiply = 2
    reset = _RESET
    output = _CLOCK_M2

[clocktool]
    clock = _SQ3_CLOCK_TIMING
    divide = 2
    reset = _RESET
    output = _CLOCK_D2

[clocktool]
    clock = _SQ3_CLOCK_TIMING
    divide = 4
    reset = _RESET
    output = _CLOCK_D4

[clocktool]
    clock = _SQ3_CLOCK_TIMING
    divide = 8
    reset = _RESET
    output = _CLOCK_D8

[clocktool]
    clock = _SQ3_CLOCK_TIMING
    divide = 16
    reset = _RESET
    output = _CLOCK_D16

[clocktool]
    clock = _SQ3_CLOCK_TIMING
    divide = 32
    reset = _RESET
    output = _CLOCK_D32

[clocktool]
    dutycycle = 0.1
    clock = _MAIN_CLOCK
    divide = 4
    reset = _RESET
    output = _CLOCK_BEAT

[copy]
    input = _SQ3_CLOCK_TIMING
    output = G1.8

# -------------------------------------------------
# RESET
# -------------------------------------------------

# Reset can be done via MIDI, via input I8 and by pressing the play button
[logic]
    input1 = _MIDI_USB_IN_RESET
    input2 = _MIDI_DIN_IN_RESET
    input3 = B4.29
    input4 = I8
    or = _RESET

# Provide a copy of the reset to output 8, so you can attach other modules and have them reset when our sequencer starts
[copy]
    input = _RESET
    output = G1.7

# -------------------------------------------------
# RECORD/PLAY BUTTON
# -------------------------------------------------

# Record/Play button
[button]
    button = B4.31
    onvalue = 1
    offvalue = 0
    output = _START_RECORDING
    inverted = _PLAY_RECORDING_MANUAL

# Flip back to Play Recording
[compare]
    input = L4.31
    compare = 0
    ifequal = 1
    else = _PLAY_RECORDING_MANUAL
    output = _PLAY_RECORDING_V2

[logic]
    xor = _PLAY_RECORDING
    input1 = _PLAY_RECORDING_V2
    input2 = _STOP_RECORDING

# Hold Start recording for 3.99 Beats to compare with Clock_BAR
[gatetool]
    inputedge = _START_RECORDING
    taptempo = _CLOCK_BEAT
    gatelength = 3.99
    outputgate = _PUNCH_IN

# Trigger Recording on BAR
[logic]
    input1 = _CLOCK_BAR
    input2 = _PUNCH_IN
    and = _RECORD_IN_SYNC

[clocktool]
    clock = _MAIN_CLOCK
    reset = _RESET
    divide = 16
    output = _CLOCK_BAR

# Set stop trigger based on start recording+number of bars via switch
[triggerdelay]
    clock = _CLOCK_BEAT
    input = _RECORD_IN_SYNC
    delay = 4 * _BARS
    repeats = 1
    output = _STOP_RECORDING

# Number of Bars
[switch]
    input1 = 1
    input2 = 2
    input3 = 4
    input4 = 8
    input5 = 16
    input6 = 32
    input7 = 64
    input8 = 128
    offset = S3.1
    output1 = _BARS

# Switch Play led based on selected recorder
[switch]
    input1 = _LED_PLAY_SQ1
    input2 = _LED_PLAY_SQ2
    input3 = _LED_PLAY_SQ3
    input4 = _LED_PLAY_SQ4
    offset = _SEQUENCER_SELECTOR
    output1 = _LED_PLAY

# Switch Record led based on selected recorder
# [switch]
#   input1 = _LED_RECORD_SQ1
#   input2 = _LED_RECORD_SQ2
#   input3 = _LED_RECORD_SQ3
#   input4 = _LED_RECORD_SQ4
#   offset = _SEQUENCER_SELECTOR
#   output1 = _LED_RECORD

# RECORD LED : ON or Blinking
[compare]
    input = L4.31
    compare = 1
    ifequal = _LED_BLINKER
    else = 0
    output = L4.31

# PLAY LED : ON or Blinking
[compare]
    input = _BYPASS_RECORDING
    compare = 1
    ifequal = _LED_BLINKER
    else = _LED_PLAY
    output = L4.30

# BYPASS Recorder Switch: up = Recorder, down = IN->OUT
[copy]
    input = S3.7
    output = _BYPASS_RECORDING

# -------------------------------------------------
# SEQ SELECTOR
# -------------------------------------------------

[buttongroup]
    button1 = B4.25
    button2 = B4.26
    button3 = B4.27
    button4 = B4.28
    led1 = L4.25
    led2 = L4.26
    led3 = L4.27
    led4 = L4.28
    led5 = L5.25
    output = _SEQUENCER_SELECTOR

# -------------------------------------------------
# SEQ BUTTONS FADERMODE
# -------------------------------------------------

# Sequencers have different Fadermodes:

# Select SEQUENCER at the second bottom row, then select any Fadermode at the top to change the faders to that mode.

# SLICES
# RANDOM CV
# PROBABILITY
# RATCHET
# PRESET
# VELOCITY
# PITCH/Gate Length
# TIMING
[buttongroup]
    button1 = B4.1
    button2 = B4.2
    button3 = B4.3
    button4 = B4.4
    button5 = B5.1
    button6 = B5.2
    button7 = B5.3
    button8 = B5.4
    button9 = B5.8
    value4 = 5
    value7 = 10 # Pitch
    value8 = 98 # Timing
    value9 = 99
    led1 = L4.1
    led2 = L4.2
    led3 = L4.3
    led4 = L4.4
    led5 = L5.1
    led6 = L5.2
    led7 = L5.3
    led8 = L5.4
    led9 = L5.8
    output = _SQ_FADERMODE

# -------------------------------------------------
# SEQ / FADERMODE ACTIVE
# Create internal cables for activated Sequencer/FaderMode to use for select. This helps prevent clashing of fadermodes
# -------------------------------------------------

# # Make the status "SQ 1 active" available in a cable
[copy]
    input = L4.25
    output = _SQ1_ACTIVE

# # Make the status "SQ 2 active" available in a cable
[copy]
    input = L4.26
    output = _SQ2_ACTIVE

# # Make the status "SQ 3 active" available in a cable
[copy]
    input = L4.27
    output = _SQ3_ACTIVE

# # Make the status "SQ 4 active" available in a cable
[copy]
    input = B4.28
    output = _SQ4_ACTIVE

# Make the status "menu active" available in a cable
[copy]
    input = L5.8
    output = _MENU_ACTIVE

# # Make the status "Timing Fader Mode active" available in a cable
[copy]
    input = L5.4
    output = _SQ_TIMING_ACTIVE

# Provide the information "neither to be added extra fadermode menu nor timing menu open" on a cable
[compare]
    input = _SQ_TIMING_ACTIVE + _MENU_ACTIVE
    compare = 0
    ifequal = 1
    else = 0
    output = _MENU_INACTIVE

# Select faders for track 1 if the menu is inactive and track 1 is selected
[logic]
    input1 = _MENU_INACTIVE
    input2 = _SQ1_ACTIVE
    and = _SQ1_SELECTED

# Select faders for track 1 if the menu is inactive and track 1 is selected
[logic]
    input1 = _MENU_INACTIVE
    input2 = _SQ2_ACTIVE
    and = _SQ2_SELECTED

# Select faders for track 1 if the menu is inactive and track 1 is selected
[logic]
    input1 = _MENU_INACTIVE
    input2 = _SQ3_ACTIVE
    and = _SQ3_SELECTED

# Select faders for track 1 if the menu is inactive and track 1 is selected
[logic]
    input1 = _MENU_INACTIVE
    input2 = _SQ4_ACTIVE
    and = _SQ4_SELECTED

# -------------------------------------------------
# SEQ GLOBAL FADER MENU (faders 1-4)
# -------------------------------------------------

# Little LFO for the LED animation of the fader menu
[lfo]
    hz = 1
    offset = 0.2
    level = 0.8
    triangle = _MENU_LED_BRIGHTNESS

# Fader 1: Speed of the master clock
[motorfader]
    fader = 1
    select = _MENU_ACTIVE
    ledvalue = _MENU_LED_BRIGHTNESS
    ledcolor = 0.1
    output = _SET_TEMPO

# Fader 2: Global transposition
[motorfader]
    fader = 2
    notches = 13
    select = _MENU_ACTIVE
    ledvalue = _MENU_LED_BRIGHTNESS
    ledcolor = 0.22
    output = _TRANSPOSITION

# Fader 3: Root note
[motorfader]
    fader = 3
    select = _MENU_ACTIVE
    notches = 13
    ledvalue = _MENU_LED_BRIGHTNESS
    ledcolor = 0.36
    output = _MENU_ROOT

# Fader 4: Scale

# Selects the scale from the following list (1 is fader at bottom):

# 5: chromatic
# 4: phrygian minor
# 3: dorian minor
# 2: natural minor
# 1: major
[motorfader]
    fader = 4
    select = _MENU_ACTIVE
    notches = 5
    ledvalue = _MENU_LED_BRIGHTNESS
    ledcolor = 0.49
    output = _DEGREE_OFFSET

# Maps the fader positions to the various scales
# You can use other scales as well (see the description of the input degree of motorfader
# for the numbers of the scales).

# The special number 12 is for switching to a chromatic scale
[switch]
    input1 = 1
    input2 = 7
    input3 = 6
    input4 = 9
    input5 = 12
    offset = _DEGREE_OFFSET
    output1 = _MENU_DEGREE

# The chromatic scale is not a scale of motoquencer. It is simulated by selecting any scale (12 = 0 in this case) and
# enabling the five none-scale notes with the selectfillX inputs.
[compare]
    input = _MENU_DEGREE
    compare = 12
    ifequal = 1
    else = 0
    output = _CHROMATIC_ENABLED

# -------------------------------------------------
# SEQ FADER MENU SQ 1 (faders 5-8)
# -------------------------------------------------

# Fader 5: Gate length
[motorfader]
    fader = 5
    select = _MENU_ACTIVE * _SQ1_ACTIVE
    loadpreset = _SQ1_LOAD_PRESET
    savepreset = _SQ1_SAVE_PRESET
    preset = _SQ1_SELECT_PRESET
    startvalue = 0.5
    ledvalue = _MENU_LED_BRIGHTNESS
    ledcolor = 0.65
    output = _SQ1_GATELEN

# Fader 8: Per track clock divider / multiplier

# 7: time / 32
# 6: time / 16
# 5: time / 8
# 4: quarter time
# 3: half time
# 2: normal clock
# 1: double time
[motorfader]
    fader = 8
    notches = 7
    select = _MENU_ACTIVE * _SQ1_ACTIVE
    loadpreset = _SQ1_LOAD_PRESET
    savepreset = _SQ1_SAVE_PRESET
    preset = _SQ1_SELECT_PRESET
    ledvalue = _MENU_LED_BRIGHTNESS
    ledcolor = 1
    output = _SQ1_TIMEDIV_NUM

[switch]
    input1 = _CLOCK_M2
    input2 = _SQ1_CLOCK_TIMING
    input3 = _CLOCK_D2
    input4 = _CLOCK_D4
    input5 = _CLOCK_D8
    input6 = _CLOCK_D16
    input7 = _CLOCK_D32
    offset = _SQ1_TIMEDIV_NUM
    output1 = _SQ1_CLOCK

# -------------------------------------------------
# SQ1 RESET
# -------------------------------------------------

[buttongroup]
    select = _MENU_ACTIVE
    button1 = B2.1
    button2 = B2.2
    button3 = B2.3
    button4 = B2.4
    led1 = L2.1
    led2 = L2.2
    led3 = L2.3
    led4 = L2.4
    output = _ACTIVE_FADER

[compare]
    input = _ACTIVE_FADER
    compare = 1
    ifequal = 1
    else = 0
    output = _SQ1_RESET_SELECTED

[compare]
    input = _ACTIVE_FADER
    compare = 2
    ifequal = 1
    else = 0
    output = _SQ1_PATTERN_SELECTED

[recorder]
    bypass = _SQ1_AUTORESET_RAW * _PLAY_RECORDING
    playbutton = _PLAY_RECORDING
    recordbutton = _RECORD_IN_SYNC
    playled = L4.30
    recordled = L4.31
    clock = _MAIN_CLOCK
    loop = 1
    numberout = _SQ1_AUTORESET
    numberin = _SQ1_AUTORESET_RAW

# Fader 6: Auto reset
[motorfader]
    ledvalue = _SQ1_RESET_SELECTED
    fader = 6
    select = _MENU_ACTIVE * _SQ1_ACTIVE
    loadpreset = _SQ1_LOAD_PRESET
    savepreset = _SQ1_SAVE_PRESET
    preset = _SQ1_SELECT_PRESET
    notches = 17
    output = _SQ1_AUTORESET_RAW

# -------------------------------------------------
# SQ PATTERN
# -------------------------------------------------

[recorder]
    bypass = _SQ1_PATTERN_RAW * _SQ1_PATTERN_SELECTED
    select = _MENU_ACTIVE * _SQ1_PATTERN_SELECTED
    playbutton = _PLAY_RECORDING
    recordbutton = _RECORD_IN_SYNC
    playled = L4.30
    recordled = L4.31
    clock = _MAIN_CLOCK
    loop = 1
    numberout = _SQ1_PATTERN
    numberin = _SQ1_PATTERN_RAW

# Fader 7: Play pattern

# 0: go step by step to the sequence (normal)
# 1: two steps forward, one step backward
# 2: double step forward, one step backward
# 3: double step forward, double step backward, single step forward
# 4: double step forward, single step forward, double step backward, single step forward
# 5: random single step forward or backward
# 6: go forward by a small random number of steps
# 7: random jump to any allowed (other) note
[motorfader]
    fader = 7
    notches = 8
    select = _MENU_ACTIVE * _SQ1_ACTIVE
    loadpreset = _SQ1_LOAD_PRESET
    savepreset = _SQ1_SAVE_PRESET
    preset = _SQ1_SELECT_PRESET
    ledvalue = _SQ1_PATTERN_SELECTED
    output = _SQ1_PATTERN_RAW

# -------------------------------------------------
# SEQ FADER MENU SQ 2 (faders 5-8)
# -------------------------------------------------

# Fader 5: Gate length
[motorfader]
    fader = 5
    select = _MENU_ACTIVE * _SQ2_SELECTED
    preset = _SQ2_SELECT_PRESET
    loadpreset = _SQ2_LOAD_PRESET
    savepreset = _SQ2_SAVE_PRESET
    startvalue = 0.5
    ledvalue = _MENU_LED_BRIGHTNESS
    ledcolor = 0.65
    output = _SQ2_GATELEN

# Fader 6: Auto reset
[motorfader]
    fader = 6
    select = _MENU_ACTIVE * _SQ2_SELECTED
    preset = _SQ2_SELECT_PRESET
    loadpreset = _SQ2_LOAD_PRESET
    savepreset = _SQ2_SAVE_PRESET
    notches = 17
    ledvalue = _MENU_LED_BRIGHTNESS
    ledcolor = 0.7
    output = _SQ2_AUTORESET

# Fader 7: Play pattern

# 0: go step by step to the sequence (normal)
# 1: two steps forward, one step backward
# 2: double step forward, one step backward
# 3: double step forward, double step backward, single step forward
# 4: double step forward, single step forward, double step backward, single step forward
# 5: random single step forward or backward
# 6: go forward by a small random number of steps
# 7: random jump to any allowed (other) note
[motorfader]
    fader = 7
    notches = 8
    select = _MENU_ACTIVE * _SQ2_SELECTED
    preset = _SQ2_SELECT_PRESET
    loadpreset = _SQ2_LOAD_PRESET
    savepreset = _SQ2_SAVE_PRESET
    ledvalue = _MENU_LED_BRIGHTNESS
    ledcolor = 0.85
    output = _SQ2_PATTERN

# Fader 8: Per track clock divider / multiplier

# 7: time / 32
# 6: time / 16
# 5: time / 8
# 4: quarter time
# 3: half time
# 2: normal clock
# 1: double time
[motorfader]
    fader = 8
    notches = 7
    select = _MENU_ACTIVE * _SQ2_SELECTED
    preset = _SQ2_SELECT_PRESET
    loadpreset = _SQ2_LOAD_PRESET
    savepreset = _SQ2_SAVE_PRESET
    ledvalue = _MENU_LED_BRIGHTNESS
    ledcolor = 1
    output = _SQ2_TIMEDIV_NUM

[switch]
    input1 = _CLOCK_M2
    input2 = _SQ2_CLOCK_TIMING
    input3 = _CLOCK_D2
    input4 = _CLOCK_D4
    input5 = _CLOCK_D8
    input6 = _CLOCK_D16
    input7 = _CLOCK_D32
    offset = _SQ2_TIMEDIV_NUM
    output1 = _SQ2_CLOCK

# -------------------------------------------------
# SEQ FADER MENU SQ 3 (faders 5-8)
# -------------------------------------------------

# Fader 5: Gate length
[motorfader]
    fader = 5
    select = _MENU_ACTIVE * _SQ3_SELECTED
    preset = _SQ3_SELECT_PRESET
    savepreset = _SQ3_SAVE_PRESET
    loadpreset = _SQ3_LOAD_PRESET
    startvalue = 0.5
    ledvalue = _MENU_LED_BRIGHTNESS
    ledcolor = 0.65
    output = _SQ3_GATELEN

# Fader 6: Auto reset
[motorfader]
    fader = 6
    select = _MENU_ACTIVE * _SQ3_SELECTED
    preset = _SQ3_SELECT_PRESET
    savepreset = _SQ3_SAVE_PRESET
    loadpreset = _SQ3_LOAD_PRESET
    notches = 17
    ledvalue = _MENU_LED_BRIGHTNESS
    ledcolor = 0.7
    output = _SQ3_AUTORESET

# Fader 7: Play pattern

# 0: go step by step to the sequence (normal)
# 1: two steps forward, one step backward
# 2: double step forward, one step backward
# 3: double step forward, double step backward, single step forward
# 4: double step forward, single step forward, double step backward, single step forward
# 5: random single step forward or backward
# 6: go forward by a small random number of steps
# 7: random jump to any allowed (other) note
[motorfader]
    preset = _SQ3_SELECT_PRESET
    savepreset = _SQ3_SAVE_PRESET
    loadpreset = _SQ3_LOAD_PRESET
    fader = 7
    notches = 8
    select = _MENU_ACTIVE * _SQ3_SELECTED
    ledvalue = _MENU_LED_BRIGHTNESS
    ledcolor = 0.85
    output = _SQ3_PATTERN

# Fader 8: Per track clock divider / multiplier

# 7: time / 32
# 6: time / 16
# 5: time / 8
# 4: quarter time
# 3: half time
# 2: normal clock
# 1: double time
[motorfader]
    preset = _SQ3_SELECT_PRESET
    savepreset = _SQ3_SAVE_PRESET
    loadpreset = _SQ3_LOAD_PRESET
    fader = 8
    notches = 7
    select = _MENU_ACTIVE * _SQ3_SELECTED
    ledvalue = _MENU_LED_BRIGHTNESS
    ledcolor = 1
    output = _SQ3_TIMEDIV_NUM

[switch]
    input1 = _CLOCK_M2
    input2 = _SQ3_CLOCK_TIMING
    input3 = _CLOCK_D2
    input4 = _CLOCK_D4
    input5 = _CLOCK_D8
    input6 = _CLOCK_D16
    input7 = _CLOCK_D32
    offset = _SQ3_TIMEDIV_NUM
    output1 = _SQ3_CLOCK

# -------------------------------------------------
# SEQ BUTTONS MUTE
# -------------------------------------------------

# MUTE SQ1 (inverted to act as LED on = UNMUTED)
[button]
    button = B4.21
    led = L4.21
    inverted = _SQ1_MUTE

# MUTE SQ2
[button]
    button = B4.22
    led = L4.22
    inverted = _SQ2_MUTE

# MUTE SQ3
[button]
    button = B4.23
    led = L4.23
    inverted = _SQ3_MUTE

# MUTE SQ3
[button]
    button = B4.24
    led = L4.24
    inverted = _SQ4_MUTE

# -------------------------------------------------
# SEQ PAGE SWITCHER
# Created a fancy LED blinking page follower to be able to follow the FORM AABC which page is currently playing.
# -------------------------------------------------

# Switch active Led page based by PAGE output from FROM (need to be in reverse)
[switch]
    output4 = _CURRENT_PAGE1
    output3 = _CURRENT_PAGE2
    output2 = _CURRENT_PAGE3
    output1 = _CURRENT_PAGE4
    offset = _CURRENT_PAGE * -1
    input1 = _CLOCK_4TH * -0.5

# Switch Current_page cable based on active sequence
[switch]
    input1 = _SQ1_CURRENT_PAGE
    input2 = _SQ2_CURRENT_PAGE
    input3 = _SQ8_CURRENT_PAGE
    offset = _SEQUENCER_SELECTOR
    output1 = _CURRENT_PAGE

# Switch active Led page based by PAGE output from FROM (need to be in reverse)
[switch]
    output4 = _PAGE1
    output3 = _PAGE2
    output2 = _PAGE3
    output1 = _PAGE4
    offset = _PAGE_SWITCHER * -1
    input1 = 1

# Turn Led ON if PAGE1 is selected, else blink current page running
[copy]
    input = _CURRENT_PAGE1 + _PAGE1
    output = L5.32

# Turn Led ON if PAGE2 is selected, else blink current page running
[copy]
    input = _CURRENT_PAGE2 + _PAGE2
    output = L5.31

# Turn Led ON if PAGE3 is selected, else blink current page running
[copy]
    input = _CURRENT_PAGE3 + _PAGE3
    output = L5.30

# Turn Led ON if PAGE4 is selected, else blink current page running
[copy]
    input = _CURRENT_PAGE4 + _PAGE4
    output = L5.29

# Switch to Steps 1-8/9-16/17-24/25-32
[buttongroup]
    button1 = B5.29
    button2 = B5.30
    button3 = B5.31
    button4 = B5.32
    output = _PAGE_SWITCHER

# -------------------------------------------------
# SEQ PRESET SELECT
# Normally you would setup one internal cable for save/load/present number because only one track is active.
# 
# But to be able to build separate tracks like ableton clips, these actions are already separated.
# -------------------------------------------------

# Preset buttons Sequencer 1
[buttongroup]
    select = _SQ1_ACTIVE
    longpress = _SQ1_SAVE_PRESET
    buttonpress = _SQ1_LOAD_PRESET_MANUAL
    button1 = B4.5
    button2 = B4.6
    button3 = B4.7
    button4 = B4.8
    output = _SQ1_SELECT_PRESET_MANUAL

# Preset buttons Sequencer 2
[buttongroup]
    select = _SQ2_ACTIVE
    longpress = _SQ2_SAVE_PRESET
    buttonpress = _SQ2_LOAD_PRESET_MANUAL
    button1 = B4.5
    button2 = B4.6
    button3 = B4.7
    button4 = B4.8
    output = _SQ2_SELECT_PRESET_MANUAL

# Preset buttons Sequencer 3
[buttongroup]
    select = _SQ3_ACTIVE
    longpress = _SQ3_SAVE_PRESET
    buttonpress = _SQ3_LOAD_PRESET_MANUAL
    button1 = B4.5
    button2 = B4.6
    button3 = B4.7
    button4 = B4.8
    output = _SQ3_SELECT_PRESET_MANUAL

# Preset buttons Sequencer 3
[buttongroup]
    select = _SQ4_ACTIVE
    longpress = _SQ4_SAVE_PRESET
    buttonpress = _SQ4_LOAD_PRESET_MANUAL
    button1 = B4.5
    button2 = B4.6
    button3 = B4.7
    button4 = B4.8
    output = _SQ4_SELECT_PRESET_MANUAL

# -------------------------------------------------
# SEQ PRESET MANUAL/SEQUENCED
# -------------------------------------------------

# [flipflop]
#   reset = _SQ_LOAD_PRESET_MANUAL
#   set = _SQ_LOAD_PRESET_RECORDING
#   output = _SQ_SWITCH_MANUAL_SEQUENCED_PRESET

# Switch between manual preset select or sequenced for all sequencers
[switch]
    input3 = 1
    input2 = 0
    input1 = 0
    offset = S3.10
    output1 = _SQ_SWITCH_MANUAL_SEQUENCED_PRESET

# Switch Led sequence based on selected Sequencer
[switch]
    input1 = _SQ1_SELECT_PRESET
    input2 = _SQ2_SELECT_PRESET
    input3 = _SQ3_SELECT_PRESET
    input4 = _SQ4_SELECT_PRESET
    offset = _SEQUENCER_SELECTOR
    output1 = _SQ_SELECT_PRESET_LED

# Sequencer 1: Select Preset number manual or sequenced
[compare]
    output = _SQ1_SELECT_PRESET
    input = _SQ_SWITCH_MANUAL_SEQUENCED_PRESET
    compare = 1
    ifequal = _SQ1_SELECT_PRESET_SEQUENCED
    else = _SQ1_SELECT_PRESET_MANUAL

# Sequencer 1: Load Preset manual or sequenced
[compare]
    output = _SQ1_LOAD_PRESET
    input = _SQ_SWITCH_MANUAL_SEQUENCED_PRESET
    compare = 1
    ifequal = _SQ1_LOAD_PRESET_SEQUENCED
    else = _SQ1_LOAD_PRESET_MANUAL

# Sequencer 2: Select Preset number manual or sequenced
[compare]
    output = _SQ2_SELECT_PRESET
    input = _SQ_SWITCH_MANUAL_SEQUENCED_PRESET
    compare = 1
    ifequal = _SQ2_SELECT_PRESET_SEQUENCED
    else = _SQ2_SELECT_PRESET_MANUAL

# Sequencer 2: Load Preset manual or sequenced
[compare]
    output = _SQ2_LOAD_PRESET
    input = _SQ_SWITCH_MANUAL_SEQUENCED_PRESET
    compare = 1
    ifequal = _SQ2_LOAD_PRESET_SEQUENCED
    else = _SQ2_LOAD_PRESET_MANUAL

# Sequencer 3: Select Preset number manual or sequenced
# [compare]
#   output = _SQ3_SELECT_PRESET
#   input = _SWITCH_MANUAL_SEQUENCED_PRESET
#   compare = 1
#   ifequal = _SQ3_SELECT_PRESET_SEQUENCED
#   else = _SQ3_PRESET_SELECT_MANUAL

# Sequencer 3: Load Preset manual or sequenced
# [compare]
#   output = _SQ3_LOAD_PRESET
#   input = _SWITCH_MANUAL_SEQUENCED_PRESET
#   compare = 1
#   ifequal = _SQ3_LOAD_PRESET_SEQUENCED
#   else = _SQ3_LOAD_PRESET_MANUAL

# Sequencer 3: Load Preset manual or sequenced
[compare]
    output = _SQ3_SELECT_PRESET
    input = _SQ_SWITCH_MANUAL_SEQUENCED_PRESET
    compare = 1
    ifequal = _SQ3_SELECT_PRESET_SEQUENCED
    else = _SQ3_SELECT_PRESET_MANUAL

# Sequencer 4: Load Preset manual or sequenced
[compare]
    output = _SQ4_SELECT_PRESET
    input = _SQ_SWITCH_MANUAL_SEQUENCED_PRESET
    compare = 1
    ifequal = _SQ4_SELECT_PRESET_SEQUENCED
    else = _SQ4_SELECT_PRESET_MANUAL

# Sequencer 3: Load Preset manual or sequenced
[compare]
    output = _SQ3_LOAD_PRESET
    input = _SQ_SWITCH_MANUAL_SEQUENCED_PRESET
    compare = 1
    ifequal = _SQ3_LOAD_PRESET_SEQUENCED
    else = _SQ3_LOAD_PRESET_MANUAL

# Sequencer 4: Load Preset manual or sequenced
[compare]
    output = _SQ4_LOAD_PRESET
    input = _SQ_SWITCH_MANUAL_SEQUENCED_PRESET
    compare = 1
    ifequal = _SQ4_LOAD_PRESET_SEQUENCED
    else = _SQ4_LOAD_PRESET_MANUAL

# -------------------------------------------------
# SEQ PRESET SAVE LED BLINKER
# -------------------------------------------------

# Set save blinker action on the selected SEQUENCER
[switch]
    input1 = _SQ1_SAVE_PRESET
    input2 = _SQ2_SAVE_PRESET
    input3 = _SQ3_SAVE_PRESET
    offset = _SEQUENCER_SELECTOR
    output1 = _SQ_SAVE_PRESET

# Switch active Led based on selected preset (leds needs to be in reversed order to work with offset)
[switch]
    output1 = L4.5
    output2 = L4.6
    output3 = L4.7
    output4 = L4.8
    offset = _SQ_SELECT_PRESET_LED * -1
    input1 = _LED_CURRENT_SAVE

# LED is ON. If not: SAVE_ACTION: BLINK. Only when specific Preset LED is selected.
[logic]
    xor = _LED_CURRENT_SAVE
    input2 = 1
    input1 = _LED_BLINK_HALF_SEC

# SAVE_ACTION: Blink for 0.5 seconds
[mixer]
    input1 = _LED_BLINKER * _GATE_ON_HALF_SECOND
    output = _LED_BLINK_HALF_SEC

# SAVE_ACTION: Set blinker speed
[lfo]
    hz = 4
    square = _LED_BLINKER

# SAVE_ACTION: Set blinker duration when SAVE PRESET is TOGGLED
[gatetool]
    inputtrigger = _SQ_SAVE_PRESET
    gatelength = 0.5
    outputgate = _GATE_ON_HALF_SECOND

# -------------------------------------------------
# SEQ PRESET LENGTH
# Use a shift button B2.32 to select the number of bars of current preset.
# A select circuit is used to switch the save states to the selected Sequencer
# -------------------------------------------------

# Set sequencer length to 4/8/16/32 bars.
# Use the shift button B2.32 + select the number of bars selected on the right.
[buttongroup]
    select = _SEQUENCER_SELECTOR
    selectat = 0
    loadpreset = _SQ1_LOAD_PRESET
    savepreset = _SQ1_SAVE_PRESET
    preset = _SQ1_SELECT_PRESET
    button1 = B5.29 * B4.32
    button2 = B5.30 * B4.32
    button3 = B5.31 * B4.32
    button4 = B5.32 * B4.32
    startbutton = 3
    value1 = 4
    value2 = 8
    value3 = 16
    value4 = 32
    output = _SQ1_SET_LENGTH_PRESET

# Set sequencer length to 4/8/16/32 bars.
# Use the shift button B2.32 + select the number of bars selected on the right.
[buttongroup]
    select = _SEQUENCER_SELECTOR
    selectat = 1
    loadpreset = _SQ2_LOAD_PRESET
    savepreset = _SQ2_SAVE_PRESET
    preset = _SQ2_SELECT_PRESET
    startbutton = 3
    button1 = B5.29 * B4.32
    button2 = B5.30 * B4.32
    button3 = B5.31 * B4.32
    button4 = B5.32 * B4.32
    value1 = 4
    value2 = 8
    value3 = 16
    value4 = 32
    output = _SQ2_SET_LENGTH_PRESET

# Set sequencer length to 4/8/16/32 bars.
# Use the shift button B2.32 + select the number of bars selected on the right.
[buttongroup]
    select = _SEQUENCER_SELECTOR
    selectat = 2
    loadpreset = _SQ3_LOAD_PRESET
    savepreset = _SQ3_SAVE_PRESET
    preset = _SQ3_SELECT_PRESET
    startbutton = 3
    button1 = B5.29 * B4.32
    button2 = B5.30 * B4.32
    button3 = B5.31 * B4.32
    button4 = B5.32 * B4.32
    value1 = 4
    value2 = 8
    value3 = 16
    value4 = 32
    output = _SQ8_SET_LENGTH_PRESET

# -------------------------------------------------
# SEQ PRESET RECORDER
# Global settings for all Sequencers:
# - record/play logic
# - recording select buttons
# - filenaming
# -------------------------------------------------

# Presets buttons Sequencer 1
[buttongroup]
    longpress = _SQ_SAVE_PRESET_RECORDING
    buttonpress = _SQ_LOAD_PRESET_RECORDING
    button1 = B4.9
    button2 = B4.10
    button3 = B4.11
    button4 = B4.12
    button5 = B5.9
    button6 = B5.10
    button7 = B5.11
    button8 = B5.12
    value1 = 1
    value2 = 2
    value3 = 3
    value4 = 4
    value5 = 5
    value6 = 6
    value7 = 7
    value8 = 8
    output = _SQ_SELECT_PRESET_RECORDING

# Set a sequence of 8 Bars to set the length of the recording and send trigger to stop after end of Bar 7.
[sequencer]
    gate8 = 1
    clock = _CLOCK_BAR
    reset = _RESET
    steps = 8
    cv1 = 0
    cv2 = 1
    cv3 = 2
    cv4 = 3
    cv5 = 4
    cv6 = 5
    cv7 = 6
    cv8 = 7
    cvoutput = _BAR_RECORDING

# [logic]
#   input3 = B4.29
#   input4 = _SQ1_LOAD_PRESET_RECORDING
#   or = _RESET_RECORDING

# Show the progress BAR leds turning on  each bar using the offset in reverse.
[switch]
    output1 = L4.13
    output2 = L4.14
    output3 = L4.15
    output4 = L4.16
    output5 = L5.13
    output6 = L5.14
    output7 = L5.15
    output8 = L5.16
    offset = _BAR_RECORDING * -1
    input1 = _CLOCK_BEAT * 0.8 + 0.2

# Reset the bar loop on RESET AND LOAD PRESET
# [copy]
#   input = _SQ_LOAD_PRESET_RECORDING + _RESET
#   output = _RESET_RECORDING

# Set blinker duration
[gatetool]
    inputtrigger = _SQ_SAVE_PRESET_RECORDING
    gatelength = 0.5
    outputgate = _GATE_ON_HALF_SECOND_2

# Blink for 0.5 seconds
[copy]
    input = _LED_BLINKER * _GATE_ON_HALF_SECOND_2
    output = _LED_SAVE_BLINKER_HALF_SEC

# LED is ON. If not: BLINK. Only when specific Preset LED is selected.
[logic]
    xor = _LED_CURRENT_PLAY_SAVE_2
    input2 = 1
    input1 = _LED_SAVE_BLINKER_HALF_SEC

# Switch active Led based on selected preset (need to be in reverse +1 to work with offset)
[switch]
    input1 = _LED_CURRENT_PLAY_SAVE_2
    offset = _SQ_SELECT_PRESET_RECORDING
    output1 = L5.12
    output2 = L5.11
    output3 = L5.10
    output4 = L5.9
    output5 = L4.12
    output6 = L4.11
    output7 = L4.10
    output8 = L4.9

# Select Bank
# XX00
# XX10
# XX20
# XX30
# XX40
# XX50
# XX60
# XX70

# To fill with Recordings for each sequencer, so a filename is named:

# loop0121 is sequencer1, bank 2, recording 1
[switch]
    input1 = 1 * 10
    input2 = 2 * 10
    input3 = 3 * 10
    input4 = 4 * 10
    input5 = 5 * 10
    input6 = 6 * 10
    input7 = 7 * 10
    input8 = 8 * 10
    offset = S3.2
    output1 = _PRESET_RECORDING_SELECT_BANK

# Create a Bank + Recording number like:

# Bank 1, recording 2 = XX12
[copy]
    input = _PRESET_RECORDING_SELECT_BANK + _SQ_SELECT_PRESET_RECORDING
    output = _SELECT_BANK_AND_RECORDING

# Quantize Record in/off to BAR
# [triggerdelay]
#   clock = _CLOCK_BAR
#   input = _START_RECORDING
#   delay = 0
#   output = _RECORD_IN_SYNC

# -------------------------------------------------
# SEQ PRESET RECORDER SQ1
# -------------------------------------------------

# SAVE PRESET RECORDING SQ1
[select]
    select = _SQ1_ACTIVE
    input = _SQ_SAVE_PRESET_RECORDING
    output = _SQ1_SAVE_PRESET_RECORDING

# LOAD PRESET RECORDING SQ1
[select]
    select = _SQ1_ACTIVE
    input = _SQ_LOAD_PRESET_RECORDING
    output = _SQ1_LOAD_PRESET_RECORDING

# Bypass recording when manual playing.
[gatetool]
    inputedge = _SQ1_LOAD_PRESET_MANUAL
    gatelength = 1
    outputgate = _SQ1_OVERRIDE

# Records preset button presses  and loops it.

# Switch for Record/Bypass/Play

# Filename loop0111-0888:
# Using (SQ)1, Bank 1, Recording 1 using:
# The selected sequencer
# The selected bank via rotary knob
# The pushed recording button value

# It only samples when button is triggered.
[recorder]
    select = _SQ1_ACTIVE
    load = _SQ1_LOAD_PRESET_RECORDING
    save = _SQ1_SAVE_PRESET_RECORDING
    filenumber = 1 * 100 + _SELECT_BANK_AND_RECORDING
    clock = _MAIN_CLOCK
    playbutton = _PLAY_RECORDING
    recordbutton = _RECORD_IN_SYNC
    bypass = _SQ1_OVERRIDE * _PLAY_RECORDING
    recordled = L4.31
    overflow = R25
    gatein1 = _SQ1_LOAD_PRESET_MANUAL
    numberin = _SQ1_SELECT_PRESET_MANUAL
    loop = 1
    playled = _LED_PLAY_SQ1
    numberout = _SQ1_SELECT_PRESET_SEQUENCED
    gateout1 = _SQ1_LOAD_PRESET_SEQUENCED

# -------------------------------------------------
# SEQ PRESET RECORDER SQ2
# -------------------------------------------------

# LOAD PRESET RECORDING SQ2
[select]
    select = _SQ2_ACTIVE
    input = _SQ_LOAD_PRESET_RECORDING
    output = _SQ2_LOAD_PRESET_RECORDING

# SAVE PRESET RECORDING SQ2
[select]
    select = _SQ2_ACTIVE
    input = _SQ_SAVE_PRESET_RECORDING
    output = _SQ2_SAVE_PRESET_RECORDING

# Bypass recording when manual playing.
[gatetool]
    inputedge = _SQ2_LOAD_PRESET_MANUAL
    gatelength = 1
    outputgate = _SQ2_OVERRIDE

# Records preset button presses  and loops it.

# Switch for Record/Bypass/Play

# Filename loop0111-0888:
# Using (SQ)1, Bank 1, Recording 1 using:
# The selected sequencer
# The selected bank via rotary knob
# The pushed recording button value

# It only samples when button is triggered.
[recorder]
    select = _SQ2_ACTIVE
    load = _SQ2_LOAD_PRESET_RECORDING
    save = _SQ2_SAVE_PRESET_RECORDING
    filenumber = 2 * 100 + _SELECT_BANK_AND_RECORDING
    clock = _MAIN_CLOCK
    playbutton = _PLAY_RECORDING
    recordbutton = _RECORD_IN_SYNC
    bypass = _SQ2_OVERRIDE * _PLAY_RECORDING
    recordled = L4.31
    overflow = R25
    gatein1 = _SQ2_LOAD_PRESET_MANUAL
    numberin = _SQ2_SELECT_PRESET_MANUAL
    loop = 1
    playled = _LED_PLAY_SQ2
    numberout = _SQ2_SELECT_PRESET_SEQUENCED
    gateout1 = _SQ2_LOAD_PRESET_SEQUENCED

# -------------------------------------------------
# SEQ PRESET RECORDER SQ3
# -------------------------------------------------

# LOAD PRESET RECORDING SQ3
[select]
    select = _SQ3_ACTIVE
    input = _SQ_LOAD_PRESET_RECORDING
    output = _SQ3_LOAD_PRESET_RECORDING

# SAVE PRESET RECORDING SQ3
[select]
    select = _SQ3_ACTIVE
    input = _SQ_SAVE_PRESET_RECORDING
    output = _SQ3_SAVE_PRESET_RECORDING

# Bypass recording when manual playing.
[gatetool]
    inputedge = _SQ3_LOAD_PRESET_MANUAL
    gatelength = 1
    outputgate = _SQ3_OVERRIDE

# Records preset button presses  and loops it.

# Switch for Record/Bypass/Play

# Filename loop0111-0888:
# Using (SQ)1, Bank 1, Recording 1 using:
# The selected sequencer
# The selected bank via rotary knob
# The pushed recording button value

# It only samples when button is triggered.
[recorder]
    select = _SQ3_ACTIVE
    load = _SQ3_LOAD_PRESET_RECORDING
    save = _SQ3_SAVE_PRESET_RECORDING
    filenumber = 3 * 100 + _SELECT_BANK_AND_RECORDING
    clock = _MAIN_CLOCK
    playbutton = _PLAY_RECORDING
    recordbutton = _RECORD_IN_SYNC
    bypass = _SQ3_OVERRIDE * _PLAY_RECORDING
    recordled = L4.31
    overflow = R25
    gatein1 = _SQ3_LOAD_PRESET_MANUAL
    numberin = _SQ3_SELECT_PRESET_MANUAL
    loop = 1
    playled = _LED_PLAY_SQ3
    numberout = _SQ3_SELECT_PRESET_SEQUENCED
    gateout1 = _SQ3_LOAD_PRESET_SEQUENCED

# -------------------------------------------------
# SEQ PRESET RECORDER SQ4
# -------------------------------------------------

# LOAD PRESET RECORDING SQ3
[select]
    select = _SQ4_ACTIVE
    input = _SQ_LOAD_PRESET_RECORDING
    output = _SQ4_LOAD_PRESET_RECORDING

# SAVE PRESET RECORDING SQ3
[select]
    select = _SQ4_ACTIVE
    input = _SQ_SAVE_PRESET_RECORDING
    output = _SQ4_SAVE_PRESET_RECORDING

# Bypass recording when manual playing.
[gatetool]
    inputedge = _SQ4_LOAD_PRESET_MANUAL
    gatelength = 1
    outputgate = _SQ4_OVERRIDE

# Records preset button presses  and loops it.

# Switch for Record/Bypass/Play

# Filename loop0111-0888:
# Using (SQ)1, Bank 1, Recording 1 using:
# The selected sequencer
# The selected bank via rotary knob
# The pushed recording button value

# It only samples when button is triggered.
[recorder]
    select = _SQ4_ACTIVE
    load = _SQ4_LOAD_PRESET_RECORDING
    save = _SQ4_SAVE_PRESET_RECORDING
    filenumber = 3 * 100 + _SELECT_BANK_AND_RECORDING
    clock = _MAIN_CLOCK
    playbutton = _PLAY_RECORDING
    recordbutton = _RECORD_IN_SYNC
    bypass = _SQ4_OVERRIDE * _PLAY_RECORDING
    recordled = L4.31
    overflow = R25
    gatein1 = _SQ4_LOAD_PRESET_MANUAL
    numberin = _SQ4_SELECT_PRESET_MANUAL
    loop = 1
    playled = _LED_PLAY_SQ4
    numberout = _SQ4_SELECT_PRESET_SEQUENCED
    gateout1 = _SQ4_LOAD_PRESET_SEQUENCED

# -------------------------------------------------
# SQ 1 Timing
# -------------------------------------------------

# SEQUENCER 1: DELAY
# [pot]
#   preset = _SQ1_SELECT_PRESET
#   loadpreset = _SQ1_LOAD_PRESET
#   savepreset = _SQ1_SAVE_PRESET
#   select = L4.25 * _TIMING_SELECTOR
#   pot = P6.1
#   outputscale = 0.5
#   notch = 0
#   bipolar = _SQ1_SET_DELAY

[faderbank]
    select = _SQ_TIMING_ACTIVE * _SQ1_ACTIVE
    preset = _SQ1_SELECT_PRESET
    loadpreset = _SQ1_LOAD_PRESET
    savepreset = _SQ1_SAVE_PRESET
    startvalue = 0.4
    output1 = _SQ1_TIMING1
    output2 = _SQ1_TIMING2
    output3 = _SQ1_TIMING3
    output4 = _SQ1_TIMING4
    ledvalue1 = _SQ1_TIMING1
    ledvalue2 = _SQ1_TIMING2
    ledvalue3 = _SQ1_TIMING3
    ledvalue4 = _SQ1_TIMING4

[timing]
    clock = _SWING_CLOCK
    reset = _RESET
    timing1 = _SQ1_TIMING1 * 0.4 - 0.2
    timing2 = _SQ1_TIMING2 * 0.4 - 0.2
    timing3 = _SQ1_TIMING3 * 0.4 - 0.2
    timing4 = _SQ1_TIMING4 * 0.4 - 0.2
    output = _SQ1_CLOCK_TIMING

# -------------------------------------------------
# SQ 1 Sample SLICER
# -------------------------------------------------

[motoquencer]
    select = _SQ1_SELECTED
    mute = _SQ1_MUTE
    loadpreset = _SQ1_LOAD_PRESET
    savepreset = _SQ1_SAVE_PRESET
    preset = _SQ1_SELECT_PRESET
    clock = _SQ1_CLOCK
    autoreset = _SQ1_AUTORESET
    pattern = _SQ1_PATTERN
    gatelength = _SQ1_GATELEN + 0.05
    reset = _RESET
    cvnotches = 16
    luckyratchets = 3
    copy = B4.17
    paste = B4.18
    pastefaders = B4.19
    shiftsteps = _SQ1_NUDGE_STEP
    fadermode = _SQ_FADERMODE
    numsteps = _SQ1_SET_LENGTH_PRESET
    page = _PAGE_SWITCHER
    form = _SQ1_FORM
    startofpart = _LED_START_PART
    currentpage = _SQ1_CURRENT_PAGE
    cv = _RAW_CV1
    gate = _RAW_GATE1
    linktonext = 1

# CV for Pitch
[motoquencer]
    cvrange = 0.2
    cvbase = 0
    cv = _SQ1_PITCH

# Select FORM 0-7
[button]
    select = _SEQUENCER_SELECTOR
    selectat = 0
    loadpreset = _SQ1_LOAD_PRESET
    savepreset = _SQ1_SAVE_PRESET
    preset = _SQ1_SELECT_PRESET
    states = 7
    button = B4.20
    output = _SQ1_FORM

# Show different states and highlight start of new part
[select]
    select = _SEQUENCER_SELECTOR
    selectat = 0
    input = _SQ1_FORM / 7 + _LED_START_PART
    output = L4.20

[nudge]
    select = _SEQUENCER_SELECTOR
    selectat = 0
    loadpreset = _SQ1_LOAD_PRESET
    savepreset = _SQ1_SAVE_PRESET
    preset = _SQ1_SELECT_PRESET
    buttonup = B6.2
    buttondown = B6.1
    amount = 1
    wrap = 1
    output = _SQ1_NUDGE_STEP

[copy]
    input = _RAW_GATE1
    output = G1.1

[switch]
    input1 = _VOLT_DIVIDER / 32
    input2 = _VOLT_DIVIDER / 64
    input3 = _VOLT_DIVIDER / 128
    offset = S3.3
    output1 = _CV_STEPS_PER_1V

[switch]
    input1 = 0.5
    input2 = 1
    input3 = 2
    offset = S3.6
    output1 = _VOLT_DIVIDER

[copy]
    input = _RAW_CV1 * _CV_STEPS_PER_1V
    output = _SQ1_SLICE_CV

[copy]
    input = _SQ1_SLICE_CV
    output = O2

# [midiout]
#   channel = 1
#   pitch1 = _SQ1_PITCH
#   velocity1 = _SQ1_VELOCITY

[copy]
    input = _SQ1_PITCH
    output = O1

# -------------------------------------------------
# SQ 2 Timing
# -------------------------------------------------

# [pot]
#   select = L4.26 * _TIMING_SELECTOR2
#   preset = _SQ2_SELECT_PRESET
#   loadpreset = _SQ2_LOAD_PRESET
#   savepreset = _SQ2_SAVE_PRESET
#   pot = P6.1
#   outputscale = 0.5
#   notch = 0.1
#   bipolar = _SQ2_SET_DELAY

[faderbank]
    select = _SQ_TIMING_ACTIVE * _SQ2_ACTIVE
    preset = _SQ2_SELECT_PRESET
    loadpreset = _SQ2_LOAD_PRESET
    savepreset = _SQ2_SAVE_PRESET
    startvalue = 0.4
    output1 = _SQ2_TIMING1
    output2 = _SQ2_TIMING2
    output3 = _SQ2_TIMING3
    output4 = _SQ2_TIMING4
    ledvalue1 = _SQ2_TIMING1
    ledvalue2 = _SQ2_TIMING2
    ledvalue3 = _SQ2_TIMING3
    ledvalue4 = _SQ2_TIMING4

[timing]
    clock = _SWING_CLOCK
    reset = _RESET
    timing1 = _SQ2_TIMING1 * 0.4 - 0.2
    timing2 = _SQ2_TIMING2 * 0.4 - 0.2
    timing3 = _SQ2_TIMING3 * 0.4 - 0.2
    timing4 = _SQ2_TIMING4 * 0.4 - 0.2
    output = _SQ2_CLOCK_TIMING

# [clocktool]
#   clock = _SQ2_CLOCK_TIMING_RAW
#   delay = _SQ2_SET_DELAY
#   output = _SQ2_CLOCK_TIMING

# -------------------------------------------------
# SQ 2 Sample SLICER
# -------------------------------------------------

[motoquencer]
    select = _SQ2_SELECTED
    mute = _SQ2_MUTE
    autoreset = _SQ2_AUTORESET
    currentpage = _SQ2_CURRENT_PAGE
    startofpart = _SQ2_START_OF_PART
    form = _SQ2_FORM
    pattern = _SQ2_PATTERN
    gatelength = _SQ2_GATELEN + 0.05
    paste = B4.18
    copy = B4.17
    linktonext = 1
    fadermode = _SQ_FADERMODE
    reset = _RESET
    loadpreset = _SQ2_LOAD_PRESET
    savepreset = _SQ2_SAVE_PRESET
    preset = _SQ2_SELECT_PRESET
    page = _PAGE_SWITCHER
    shiftsteps = _SQ2_NUDGE_STEP
    clock = _SQ2_CLOCK
    cvnotches = 16
    numsteps = _SQ2_SET_LENGTH_PRESET
    cv = _RAW_CV2_INTEGERS
    gate = _RAW_GATE2

# PITCH CV SEQUENCER
[motoquencer]
    cvrange = 0.2
    cvbase = -1 * 0.5 + 0.5
    cv = _PITCH_CV2

[button]
    select = _SQ2_SELECTED
    savepreset = _SQ2_SAVE_PRESET
    loadpreset = _SQ2_LOAD_PRESET
    preset = _SQ2_SELECT_PRESET
    states = 7
    button = B4.20
    output = _SQ2_FORM

# Show different states and highlight start of new part
[select]
    select = _SQ2_SELECTED
    input = _SQ2_FORM / 7 + _SQ2_START_OF_PART
    output = L4.20

[copy]
    input = _RAW_GATE2
    output = G1.2

[nudge]
    select = _SQ2_SELECTED
    savepreset = _SQ2_SAVE_PRESET
    loadpreset = _SQ2_LOAD_PRESET
    preset = _SQ2_SELECT_PRESET
    buttonup = B6.2
    buttondown = B6.1
    amount = 1
    wrap = 1
    leddown = L6.1
    ledup = L6.2
    output = _SQ2_NUDGE_STEP

[switch]
    input1 = _VOLT_DIVIDER2 / 32
    input2 = _VOLT_DIVIDER2 / 64
    input3 = _VOLT_DIVIDER2 / 128
    offset = S3.5
    output1 = _CV_STEPS_PER_1V2

[switch]
    input1 = 0.5
    input2 = 1
    input3 = 2
    offset = S3.6
    output1 = _VOLT_DIVIDER2

[copy]
    input = _RAW_CV2_INTEGERS * _CV_STEPS_PER_1V2
    output = _SQ2_SLICE_CV

[copy]
    input = _SQ2_SLICE_CV
    output = O6

[copy]
    input = _PITCH_CV2
    output = O5

# [midiout]
#   channel = 2
#   pitch1 = _PITCH_CV2
#   velocity1 = _VELOCITY_CV2

# -------------------------------------------------
# SQ 3 TIMING
# -------------------------------------------------

# [pot]
#   select = L4.26 * _TIMING_SELECTOR2
#   preset = _SQ2_SELECT_PRESET
#   loadpreset = _SQ2_LOAD_PRESET
#   savepreset = _SQ2_SAVE_PRESET
#   pot = P6.1
#   outputscale = 0.5
#   notch = 0.1
#   bipolar = _SQ2_SET_DELAY

[faderbank]
    select = _SQ_TIMING_ACTIVE * _SQ3_ACTIVE
    preset = _SQ3_SELECT_PRESET
    loadpreset = _SQ3_LOAD_PRESET
    savepreset = _SQ3_SAVE_PRESET
    output1 = _SQ8_TIMING1
    output2 = _SQ8_TIMING2
    output3 = _SQ8_TIMING3
    output4 = _SQ8_TIMING4
    output5 = _SQ8_TIMING5
    output6 = _SQ8_TIMING6
    output7 = _SQ8_TIMING7
    output8 = _SQ8_TIMING8
    ledvalue1 = _SQ8_TIMING1
    ledvalue2 = _SQ8_TIMING2
    ledvalue3 = _SQ8_TIMING3
    ledvalue4 = _SQ8_TIMING4
    ledvalue5 = _SQ8_TIMING5
    ledvalue6 = _SQ8_TIMING6
    ledvalue7 = _SQ8_TIMING7
    ledvalue8 = _SQ8_TIMING8

[timing]
    clock = _SWING_CLOCK
    reset = _RESET
    timing1 = _SQ8_TIMING1 * 0.4 - 0.2
    timing2 = _SQ8_TIMING2 * 0.4 - 0.2
    timing3 = _SQ8_TIMING3 * 0.4 - 0.2
    timing4 = _SQ8_TIMING4 * 0.4 - 0.2
    timing5 = _SQ8_TIMING5 * 0.4 - 0.2
    timing6 = _SQ8_TIMING6 * 0.4 - 0.2
    timing7 = _SQ8_TIMING7 * 0.4 - 0.2
    timing8 = _SQ8_TIMING8 * 0.4 - 0.2
    output = _SQ3_CLOCK_TIMING

# [clocktool]
#   clock = _SQ2_CLOCK_TIMING_RAW
#   delay = _SQ2_SET_DELAY
#   output = _SQ2_CLOCK_TIMING

# -------------------------------------------------
# SQ 3 CV/Gate
# -------------------------------------------------

# Set the default gate length to 0.9 (90%)
[copy]
    input = 0.9
    output = N3

# Cut off negative CV inputs and never make the gate length below 1%
[compare]
    input = I3
    compare = 0.01
    ifless = 0.01
    else = I3
    output = _CV_GATELENGTH

# POLYEND GATE, PITCH and MODULATION is used to output the midi to CV
[midiout]
    activesensing = 1
    trs = 1
    channel = 1
    pitch1 = _SQ8_CV_OUT
    modwheel = _SQ8_CV_ALT_MUTE
    gate1 = _SQ8_GATE

# Verbos Multistage type sequencer with 16 steps, additional:
# 1. Alternate CV output sequencer (for filter)
# 2. Portamento per step sequencer
# 3. Gate length sequencer
[motoquencer]
    select = _SQ3_SELECTED
    autoreset = _SQ3_AUTORESET
    clock = _SQ3_CLOCK
    preset = _SQ3_SELECT_PRESET
    savepreset = _SQ3_SAVE_PRESET
    loadpreset = _SQ3_LOAD_PRESET
    page = _PAGE_SWITCHER
    paste = B4.18
    copy = B4.17
    numsteps = _SQ8_SET_LENGTH_PRESET
    shiftsteps = _SQ8_NUDGE_STEP
    reset = _RESET
    mute = _SQ3_MUTE
    cvbase = 0
    form = _SQ8_FORM
    cvrange = 0.4
    quantize = 1
    root = _MENU_ROOT
    gatelength = _CV_GATELENGTH * _SQ3_GATELEN + 0.05
    transpose = _TRANSPOSITION / 120
    degree = _DEGREE_OFFSET
    linktonext = 1
    fadermode = _SQ_FADERMODE
    pattern = _SQ3_PATTERN
    selectfill1 = _CHROMATIC_ENABLED
    selectfill2 = _CHROMATIC_ENABLED
    selectfill3 = _CHROMATIC_ENABLED
    selectfill4 = _CHROMATIC_ENABLED
    selectfill5 = _CHROMATIC_ENABLED
    select1 = 1
    select3 = 1
    select5 = 1
    select7 = 1
    select9 = 1
    select11 = 1
    select13 = 1
    startofpart = _SQ8_START_PART
    currentpage = _SQ8_CURRENT_PAGE
    cv = _SQ8_CV_OUT
    gate = _SQ8_GATE

# Set Alternative CV
# When using fadermode=30 (3=Third motosequencer, 0=CV):
[motoquencer]
    preset = _SQ3_SELECT_PRESET
    cvbase = 0
    cvrange = 1
    cv = _SQ8_CV_ALT

# Set Gate length
# When using fadermode=10 (1=next motosequencer, 0=CV):
# [motoquencer]
#   cvbase = 0
#   cvrange = 1
#   cv = _SQ8_GATE_LENGTH

[button]
    select = _SQ3_ACTIVE
    loadpreset = _SQ3_LOAD_PRESET
    savepreset = _SQ3_SAVE_PRESET
    preset = _SQ3_SELECT_PRESET
    states = 7
    button = B4.20
    output = _SQ8_FORM

# Show different states and highlight start of new part
[select]
    select = _SQ3_ACTIVE
    input = _SQ8_FORM / 7 + _SQ8_START_PART
    output = L4.20

[nudge]
    select = _SQ3_ACTIVE
    loadpreset = _SQ3_LOAD_PRESET
    savepreset = _SQ3_SAVE_PRESET
    preset = _SQ3_SELECT_PRESET
    buttonup = B6.2
    buttondown = B6.1
    amount = 1
    wrap = 1
    leddown = L6.1
    ledup = L6.2
    output = _SQ8_NUDGE_STEP

# Set Slew per Step using the buttons
# When using fadermode=20 (2=second motosequencer, 0=CV):
# [motoquencer]
#   buttonmode = 0
#   linktonext = 1
#   gate = _SLEW_PER_STEP

# Set clock of motoquencer 4/8/16/32/BAR
# [switch]
#   input1 = _CLOCK_16TH
#   input3 = _CLOCK_8TH
#   input2 = _CLOCK_4TH
#   input4 = _CLOCK_32TH
#   input5 = _CLOCK_BAR
#   input6 = _CLOCK_BEAT
#   offset = S3.1
#   output1 = _CLOCK_SELECTABLE

# Set Mute and default mute value of gate length
# [button]
#   output = _SQ8_GATE_LENGTH_MUTE
#   button = B5.7
#   onvalue = _SQ8_GATE_LENGTH
#   offvalue = 0.3
#   led = L5.7

# Set portamento rate for slew sequencer.
# [pot]
#   select = L5.2 * L4.27
#   pot = P6.1
#   outputscale = 1
#   notch = 0
#   output = _SET_SLEW

# Set 1 slew value and combine it with gate 0/1 of step motoquencer
# [button]
#   button = B5.6
#   onvalue = _SET_SLEW * _SLEW_PER_STEP
#   offvalue = 0
#   led = L5.6
#   output = _SET_SLEW_MUTE

# Add slew per step to output
# [slew]
#   input = _SQ8_CV_OUT
#   slew = _SET_SLEW_MUTE
#   exponential = O8

# Mute alternative CV sequence to 0V
[button]
    button = B5.5
    onvalue = _SQ8_CV_ALT
    offvalue = 0
    led = L5.5
    output = _SQ8_CV_ALT_MUTE

# Set ALT CV output port
[copy]
    input = _SQ8_CV_ALT_MUTE
    output = O4

# -------------------------------------------------
# SQ 4 Polyphonic
# The 4 poly sequencer uses:
# 7 Recorders:
# 4 Note recorders to store each pitch/velo/gate separately.
# 3 for Pitch, Modwheel, Aftertouch
# 
# It needs a volt to 255 int conversion for velocity.
# 
# Each recording is stored in a Sequencer '7' 7XXX file and can have 8 banks of 8 files selectable via the 8 preset knobs and rotary knob for bank select.
# 
# X1XX is a Note 1
# X2XX is a Note 2
# X3XX is a Note 3
# X4XX is a Note 4
# X7XX is the pitch
# X8XX the mod
# X9XX  aftertouch
# -------------------------------------------------

# MIDI IN 4 polyphony
[midiin]
    channel = 1
    pressure1 = _CH1_AFTERTOUCH
    pitchbend = _CH1_PITCHBEND
    modwheel = _CH1_MODWHEEL
    pitch1 = _CH1_NOTE1_PTCH
    pitch2 = _CH1_NOTE2_PTCH
    pitch3 = _CH1_NOTE3_PTCH
    pitch4 = _CH1_NOTE4_PTCH
    gate1 = _CH1_NOTE1_GATE
    gate2 = _CH1_NOTE2_GATE
    gate3 = _CH1_NOTE3_GATE
    gate4 = _CH1_NOTE4_GATE
    velocity1 = _CH1_NOTE1_VELO
    velocity2 = _CH1_NOTE2_VELO
    velocity3 = _CH1_NOTE3_VELO
    velocity4 = _CH1_NOTE4_VELO
    roundrobin = 1
    voiceallocation = 1

# Create a Bank + Recording number like:
# Bank 1, recording 2 = XX12
[copy]
    input = _PRESET_RECORDING_SELECT_BANK + _SQ4_SELECT_PRESET_MANUAL
    output = _SQ8_SELECT_BANK_AND_RECORDING

# Note 1 recorder: pitch/gate/velo
[recorder]
    overflow = R25
    select = _SQ4_SELECTED
    sample = _CH1_NOTE1_GATE_EDGE
    bypass = _BYPASS_RECORDING
    playbutton = _PLAY_RECORDING
    recordbutton = _START_RECORDING
    loop = 1
    trimstart = 0.1
    trimend = 0.4
    save = _SQ4_SAVE_PRESET
    load = _SQ4_LOAD_PRESET_RECORDING
    filenumber = 7100 + _SQ8_SELECT_BANK_AND_RECORDING
    numberin = _CH1_NOTE1_VELO
    cvin = _CH1_NOTE1_PTCH
    gatein1 = _CH1_NOTE1_GATE
    cvout = _CH1_REC_NOTE1_PTCH
    gateout1 = _CH1_REC_NOTE1_GATE

# To have max number of 125 notes to be recorded; this will solve also recording a gate off state by also triggering a sample on a high to low edge.
[gatetool]
    inputedge = 1
    inputgate = _CH1_NOTE1_GATE
    outputgate = _CH1_NOTE1_GATE_EDGE

# Convert 0-1 Volt to 1-255 integer
[math]
    input1 = _CH1_NOTE1_VELO * 255
    round = _CH1_NOTE1_VELO_VOLT_TO_255

# Note 2 recorder: pitch/gate/velo
[recorder]
    select = _SQ4_SELECTED
    sample = _CH1_NOTE2_GATE_EDGE
    overflow = R25
    bypass = _BYPASS_RECORDING
    loop = 1
    trimstart = 0.1
    trimend = 0.4
    save = _SQ4_SAVE_PRESET
    load = _SQ4_LOAD_PRESET_RECORDING
    filenumber = 7200 + _SQ8_SELECT_BANK_AND_RECORDING
    numberin = _CH1_NOTE2_VELO
    cvin = _CH1_NOTE2_PTCH
    gatein1 = _CH1_NOTE2_GATE
    cvout = _CH1_REC_NOTE2_PTCH
    gateout1 = _CH1_REC_NOTE2_GATE

# To have max number of 125 notes to be recorded; this will solve also recording a gate off state by also triggering a sample on a high to low edge.
[gatetool]
    inputedge = 1
    inputgate = _CH1_NOTE2_GATE
    outputgate = _CH1_NOTE2_GATE_EDGE

# Convert 0-1 Volt to 1-255 integer
[math]
    input1 = _CH1_NOTE2_VELO * 255
    round = _CH1_NOTE2_VELO_VOLT_TO_255

# Note 3 recorder: pitch/gate/velo
[recorder]
    sample = _CH1_NOTE3_GATE_EDGE
    overflow = R25
    playbutton = _PLAY_RECORDING
    recordbutton = _START_RECORDING
    bypass = _BYPASS_RECORDING
    loop = 1
    trimstart = 0.1
    trimend = 0.4
    save = _SQ4_SAVE_PRESET
    load = _SQ4_LOAD_PRESET_RECORDING
    filenumber = 7300 + _SQ8_SELECT_BANK_AND_RECORDING
    numberin = _CH1_NOTE3_VELO
    cvin = _CH1_NOTE3_PTCH
    gatein1 = _CH1_NOTE3_GATE
    cvout = _CH1_REC_NOTE3_PTCH
    gateout1 = _CH1_REC_NOTE3_GATE

# To have max number of 125 notes to be recorded; this will solve also recording a gate off state by also triggering a sample on a high to low edge.
[gatetool]
    inputedge = 1
    inputgate = _CH1_NOTE3_GATE
    outputgate = _CH1_NOTE3_GATE_EDGE

# Convert 0-1 Volt to 1-255 integer
[math]
    input1 = _CH1_NOTE3_VELO * 255
    round = _CH1_NOTE3_VELO_VOLT_TO_255

# Note 4 recorder: pitch/gate/velo
[recorder]
    bypass = _BYPASS_RECORDING
    select = _SQ4_SELECTED
    overflow = R25
    playbutton = _PLAY_RECORDING
    recordbutton = _START_RECORDING
    sample = _CH1_NOTE4_GATE_EDGE
    loop = 1
    trimstart = 0.1
    trimend = 0.4
    save = _SQ4_SAVE_PRESET
    load = _SQ4_LOAD_PRESET_RECORDING
    filenumber = 7400 + _SQ8_SELECT_BANK_AND_RECORDING
    numberin = _CH1_NOTE4_VELO
    cvin = _CH1_NOTE4_PTCH
    gatein1 = _CH1_NOTE4_GATE
    cvout = _CH1_REC_NOTE4_PTCH
    gateout1 = _CH1_REC_NOTE4_GATE

# To have max number of 125 notes to be recorded; this will solve also recording a gate off state by also triggering a sample on a high to low edge.
[gatetool]
    inputedge = 1
    inputgate = _CH1_NOTE4_GATE
    outputgate = _CH1_NOTE4_GATE_EDGE

# Convert 0-1 Volt to 1-255 integer
[math]
    input1 = _CH1_NOTE4_VELO * 255
    round = _CH1_NOTE4_VELO_VOLT_TO_255

# Pitchbend recorder
[recorder]
    select = _SQ4_SELECTED
    overflow = R25
    playbutton = _PLAY_RECORDING
    recordbutton = _START_RECORDING
    bypass = _BYPASS_RECORDING
    loop = 1
    trimstart = 0.1
    trimend = 0.4
    save = _SQ4_SAVE_PRESET
    load = _SQ4_LOAD_PRESET_RECORDING
    filenumber = 7700 + _SQ8_SELECT_BANK_AND_RECORDING
    cvin = _CH1_PITCHBEND
    cvout = _CH1_REC_PITCHBEND

# Modwheel recorder
[recorder]
    select = _SQ4_SELECTED
    overflow = R25
    playbutton = _PLAY_RECORDING
    recordbutton = _START_RECORDING
    bypass = _BYPASS_RECORDING
    loop = 1
    trimstart = 0.1
    trimend = 0.4
    save = _SQ4_SAVE_PRESET
    load = _SQ4_LOAD_PRESET_RECORDING
    filenumber = 7800 + _SQ8_SELECT_BANK_AND_RECORDING
    cvin = _CH1_MODWHEEL
    cvout = _CH1_REC_MODWHEEL

# Aftertouch recorder
[recorder]
    select = _SQ4_SELECTED
    overflow = R25
    playbutton = _PLAY_RECORDING
    recordbutton = _START_RECORDING
    bypass = _BYPASS_RECORDING
    loop = 1
    trimstart = 0.1
    trimend = 0.4
    save = _SQ4_SAVE_PRESET
    load = _SQ4_LOAD_PRESET
    filenumber = 7900 + _SQ8_SELECT_BANK_AND_RECORDING
    cvin = _CH1_AFTERTOUCH
    cvout = _CH1_REC_AFTERTOUCH

# Midi Out: 4 polyphony
# Sending pitch/gate/velo/pitchbend/modwheel/aftertouch
[midiout]
    allsoundoff = _SQ4_MUTE
    channel = 1
    pitchbend = _CH1_REC_PITCHBEND
    modwheel = _CH1_REC_MODWHEEL
    channelpressure = _CH1_REC_AFTERTOUCH
    pitch1 = _CH1_REC_NOTE1_PTCH
    pitch2 = _CH1_REC_NOTE2_PTCH
    pitch3 = _CH1_REC_NOTE3_PTCH
    pitch4 = _CH1_REC_NOTE4_PTCH
    gate1 = _CH1_REC_NOTE1_GATE
    gate2 = _CH1_REC_NOTE2_GATE
    gate3 = _CH1_REC_NOTE3_GATE
    gate4 = _CH1_REC_NOTE4_GATE
    velocity1 = _CH1_NOTE1_VELO_VOLT_TO_255
    velocity2 = _CH1_NOTE2_VELO_VOLT_TO_255
    velocity3 = _CH1_NOTE3_VELO_VOLT_TO_255
    velocity4 = _CH1_NOTE4_VELO_VOLT_TO_255

# -------------------------------------------------
# SEQUENCER 7 PITCH SEQUENCER
# -------------------------------------------------

# SWITCH START END OR GATE MODE FOR BUTTONS
# [button]
#   button = B5.17
#   onvalue = 1
#   offvalue = 0
#   led = L5.17
#   output = _SET_BUTTON_MODE_M4

# [motoquencer]
#   select = _SEQUENCER_SELECTOR
#   selectat = 2
#   keyboardgate = I1
#   recordmode = _RECORD_KEYBOARD_SEQUENCE
#   keyboardcv = I2
#   preset = _SQ3_SELECT_PRESET
#   loadpreset = _SQ3_LOAD_PRESET
#   savepreset = _SQ3_SAVE_PRESET
#   page = _PAGE_SWITCHER
#   currentstep = _SEQ_STEP_NUMBER
#   numsteps = 8
#   clock = _SWING_CLOCK
#   reset = B4.29
#   cvbase = 0
#   pattern = 0
#   buttonmode = _SET_BUTTON_MODE_M4
#   cv = _SQ3_RAW_CV
#   gate = _SQ3_RAW_GATE

# [copy]
#   input = _SQ3_RAW_CV
#   output = O4

# [copy]
#   input = _SQ3_RAW_GATE
#   output = G1.4

# [switch]
#   input1 = 0
#   input2 = 1
#   input3 = 2
#   offset = S3.8
#   output1 = _RECORD_KEYBOARD_SEQUENCE

# -------------------------------------------------
# SEQUENCER 7 GATE SEQUENCER
# -------------------------------------------------

# [motoquencer]
#   selectat = _SEQUENCER_SELECTOR
#   select = 6
#   preset = _SQ3_SELECT_PRESET
#   loadpreset = _SQ3_LOAD_PRESET
#   savepreset = _SQ3_SAVE_PRESET
#   mute = B4.24
#   page = _PAGE_SWITCHER
#   numsteps = 16
#   clock = _SWING_CLOCK
#   reset = B4.29
#   pattern = 0
#   cv = _SQ3_RAW_GATE

# -------------------------------------------------
# SEQUENCER 7 S&H PITCH TO ALGO
# -------------------------------------------------

# [compare]
#   input = _SEQ_STEP_NUMBER
#   compare = 0
#   ifequal = 1
#   output = _STEP1

# [compare]
#   input = _SEQ_STEP_NUMBER
#   compare = 1
#   ifequal = 1
#   output = _STEP_2

# [compare]
#   input = _SEQ_STEP_NUMBER
#   compare = 2
#   ifequal = 1
#   output = _STEP_3

# [compare]
#   input = _SEQ_STEP_NUMBER
#   compare = 0
#   ifequal = 3
#   output = _STEP_4

# [compare]
#   input = _SEQ_STEP_NUMBER
#   compare = 4
#   ifequal = 1
#   output = _STEP_5

# [compare]
#   input = _SEQ_STEP_NUMBER
#   compare = 5
#   ifequal = 1
#   output = _STEP_6

# [compare]
#   input = _SEQ_STEP_NUMBER
#   compare = 6
#   ifequal = 1
#   output = _STEP_7

# [compare]
#   input = _SEQ_STEP_NUMBER
#   compare = 7
#   ifequal = 1
#   output = _STEP_8

# [sample]
#   input = _SQ3_RAW_CV
#   sample = _STEP1
#   output = _SQ3_PITCH_1

# [sample]
#   input = _SQ3_RAW_CV
#   sample = _STEP_2
#   output = _SQ3_PITCH_2

# [sample]
#   input = _SQ3_RAW_CV
#   sample = _STEP_3
#   output = _SQ3_PITCH_3

# [sample]
#   input = _SQ3_RAW_CV
#   sample = _STEP_4
#   output = _SQ3_PITCH_4

# [sample]
#   input = _SQ3_RAW_CV
#   sample = _STEP_5
#   output = _SQ3_PITCH_5

# [sample]
#   input = _SQ3_RAW_CV
#   sample = _STEP_6
#   output = _SQ3_PITCH_6

# [sample]
#   input = _SQ3_RAW_CV
#   sample = _STEP_7
#   output = _SQ3_PITCH_7

# [sample]
#   input = _SQ3_RAW_CV
#   sample = _STEP_8
#   output = _SQ3_PITCH_8

# -------------------------------------------------
# SEQUENCER 7 ALGOQUENCER
# -------------------------------------------------

# [algoquencer]
#   select = _SEQUENCER_SELECTOR
#   selectat = 2
#   pitch1 = _SQ3_PITCH_1
#   pitch2 = _SQ3_PITCH_2
#   pitch3 = _SQ3_PITCH_3
#   pitch4 = _SQ3_PITCH_4
#   pitch5 = _SQ3_PITCH_5
#   pitch6 = _SQ3_PITCH_6
#   pitch7 = _SQ3_PITCH_7
#   pitch8 = _SQ3_PITCH_8
#   clock = _SWING_CLOCK
#   preset = _SQ3_SELECT_PRESET
#   loadpreset = _SQ3_LOAD_PRESET
#   savepreset = _SQ3_SAVE_PRESET
#   reset = B4.29
#   led1 = L4.13
#   led2 = L4.14
#   led3 = L4.15
#   led4 = L4.16
#   led5 = L5.13
#   led6 = L5.14
#   led7 = L5.15
#   led8 = L5.16
#   button1 = B4.13
#   button2 = B4.14
#   button3 = B4.15
#   button4 = B4.16
#   button5 = B5.13
#   button6 = B5.14
#   button7 = B5.15
#   button8 = B5.16
#   activity = _ACTIVITY
#   variation = _VARIATION
#   pitchlow = 0
#   pitchhigh = S3.2 * 0.05
#   alternatebutton = B4.31
#   fills = _GATE_LENGTH
#   repeats = 2
#   pattern = _PATTERN
#   pitch = _SQ3_PITCH_CV
#   trigger = _SQ3_TRIGGER

# [copy]
#   input = _SQ3_PITCH_CV
#   output = O3

# [copy]
#   input = _SQ3_TRIGGER
#   output = G1.3

# [fadermatrix]
#   selectat = _SEQUENCER_SELECTOR
#   select = 3
#   preset = _SQ3_SELECT_PRESET
#   loadpreset = _SQ3_LOAD_PRESET
#   savepreset = _SQ3_SAVE_PRESET
#   output11 = _ACTIVITY
#   output12 = _VARIATION
#   output13 = _PATTERN
#   output14 = _GATE_LENGTH

# -------------------------------------------------
# SEQUENCER 7 WAVESHAPE SELECT
# -------------------------------------------------

# [motoquencer]
#   select = _SEQUENCER_SELECTOR
#   selectat = 4
#   page = _PAGE_SWITCHER
#   preset = _SQ3_SELECT_PRESET
#   loadpreset = _SQ3_LOAD_PRESET
#   savepreset = _SQ3_SAVE_PRESET
#   cvnotches = 8
#   numsteps = 16
#   clock = _SWING_CLOCK
#   reset = B4.29
#   cv = _RAW_CV3

# [copy]
#   input = _WAVESHAPE_TABLE_SELECT
#   output = O7

# [copy]
#   input = _RAW_CV3 / 64 + _WAVESHAPE_TABLE_SELECT2
#   output = _WAVESHAPE_TABLE_SELECT

# -------------------------------------------------
# SEQUENCER 7 WAVETABLE SELECT
# -------------------------------------------------

# [motoquencer]
#   select = _SEQUENCER_SELECTOR
#   selectat = 4
#   preset = _SQ3_SELECT_PRESET
#   loadpreset = _SQ3_LOAD_PRESET
#   savepreset = _SQ3_SAVE_PRESET
#   page = _PAGE_SWITCHER
#   cvnotches = 8
#   numsteps = 16
#   clock = _SWING_CLOCK
#   reset = B4.29
#   cv = _RAW_CV5

# [copy]
#   input = _RAW_CV5 / 8
#   output = _WAVESHAPE_TABLE_SELECT2
#   load = short press
#   save = long press

# -------------------------------------------------
# SEQ 2 KNOB TIMING
# SET SWING TIMING OF ALL PARTS
# by selecting the TIMING button
# -------------------------------------------------

[copy]
    input = _CLOCK_16TH
    output = _SWING_CLOCK

# [timing]
#   clock = _CLOCK_16TH
#   reset = _SQ1_RESET
#   timing2 = _TIMING_2
#   timing3 = _TIMING_3
#   timing4 = _TIMING_4
#   output = _SWING_CLOCK

# [pot]
#   outputscale = 0.25
#   notch = 0.05
#   select = _TIMING_SELECTOR2
#   pot = P6.2
#   bipolar = _TIMING_4

# [pot]
#   select = _TIMING_SELECTOR2
#   notch = 0.05
#   pot = P6.4
#   outputscale = 0.25
#   bipolar = _TIMING_3

# [pot]
#   select = _TIMING_SELECTOR2
#   notch = 0.05
#   pot = P6.3
#   outputscale = 0.25
#   bipolar = _TIMING_2

# -------------------------------------------------
# MiniTempi
# -------------------------------------------------

# [button]
#   button = B4.17
#   onvalue = 1
#   offvalue = 0
#   led = L4.17
#   output = _TEMPO1_MUTE

# [nudge]
#   select = B4.17
#   buttonup = B6.2
#   buttondown = B6.1
#   amount = 0.1
#   minimum = -1
#   maximum = 1
#   output = _TEMPO1_MULTIPLY_DIVIDE

# [lfo]
#   rate = _TEMPO1_MULTIPLY_DIVIDE
#   sync = B4.29
#   taptempo = B4.17
#   square = _TEMPO1

# [copy]
#   input = _TEMPO1 * _TEMPO1_MUTE
#   output = G9

# -------------------------------------------------
# Speed Control
# -------------------------------------------------

# [timing]
#   clock = _CLOCK_SELECTABLE
#   reset = B4.29
#   timing1 = _SPEED_CONTROL_TIMING1 * -1 + 0.5
#   timing2 = _SPEED_CONTROL_TIMING2 * -1 + 0.5
#   timing3 = _SPEED_CONTROL_TIMING3 * -1 + 0.5
#   timing4 = _SPEED_CONTROL_TIMING4 * -1 + 0.5
#   timing5 = _SPEED_CONTROL_TIMING5 * -1 + 0.5
#   timing6 = _SPEED_CONTROL_TIMING6 * -1 + 0.5
#   timing7 = _SPEED_CONTROL_TIMING7 * -1 + 0.5
#   timing8 = _SPEED_CONTROL_TIMING8 * -1 + 0.5
#   output = _CLOCK_SPEED_CONTROL

# [timing]
#   clock = _CLOCK_SELECTABLE
#   reset = B4.29
#   timing1 = _SPEED_CONTROL_TIMING1 * -1 + 0.5
#   timing2 = _SPEED_CONTROL_TIMING2 * -1 + 0.5
#   timing3 = _SPEED_CONTROL_TIMING3 * -1 + 0.5
#   timing4 = _SPEED_CONTROL_TIMING4 * -1 + 0.5
#   timing5 = _SPEED_CONTROL_TIMING5 * -1 + 0.5
#   timing6 = _SPEED_CONTROL_TIMING6 * -1 + 0.5
#   timing7 = _SPEED_CONTROL_TIMING7 * -1 + 0.5
#   timing8 = _SPEED_CONTROL_TIMING8 * -1 + 0.5
#   output = _CLOCK_SPEED_CONTROL

# [lfo]
#   waveform = S3.2
#   output = _SPEED_CONTROL_SHAPE
#   taptempo = _CLOCK_BAR
#   level = 1
#   bipolar = 1

# [queue]
#   input = _SPEED_CONTROL_SHAPE
#   clock = _CLOCK_SELECTABLE
#   output1 = _SPEED_CONTROL_TIMING1
#   output2 = _SPEED_CONTROL_TIMING2
#   output3 = _SPEED_CONTROL_TIMING3
#   output4 = _SPEED_CONTROL_TIMING4
#   output5 = _SPEED_CONTROL_TIMING5
#   output6 = _SPEED_CONTROL_TIMING6
#   output7 = _SPEED_CONTROL_TIMING7
#   output8 = _SPEED_CONTROL_TIMING8

# -------------------------------------------------
# ER-102 Recorder
# -------------------------------------------------

# Select Gate for recording
# [switch]
#   input1 = _SQ1_CLOCK_TIMING
#   input2 = _SQ2_CLOCK_TIMING
#   input3 = _SQ3_TRIGGER
#   offset = S3.9
#   output1 = _GATE_RECORD

# [copy]
#   input = _GATE_RECORD
#   output = G1.7

# Select clock for ER-101
# 1. Main clock, 2. Swing clock, 3. Selected sequence gates
# [switch]
#   input1 = _MAIN_CLOCK
#   input2 = _SWING_CLOCK
#   input3 = _GATE_RECORD
#   offset = S3.7
#   output1 = G1.8

# Select CV for recording
# [switch]
#   input1 = _SQ1_SLICE_CV
#   input2 = _SQ2_SLICE_CV
#   input3 = _SQ3_PITCH_CV
#   offset = S3.9
#   output1 = _CV_RECORD

# [copy]
#   input = _CV_RECORD
#   output = O8

# -------------------------------------------------
# Voltage Slicer 1V/OCT -> Bipolar 5V 8/16/32 slices
# -------------------------------------------------

# 1V/OCT to 5V Bi-polar to trigger 8/16/32 slices Sample Start points in Assimil8or  using regular Chromatic keys.
# [switch]
#   input1 = _RAW_CV1 * 7.5 - 3.75
#   input2 = _RAW_CV1 * 3.75 - 1.875
#   input3 = _RAW_CV1 * 1.875 - 0.9375
#   offset = S3.3
#   output1 = O8

# -------------------------------------------------
# Contour
# -------------------------------------------------

# [faderbank]
#   selectat = _SEQUENCER_SELECTOR
#   select = 8
#   firstfader = 1
#   output1 = _ATTACK
#   output2 = _DECAY
#   output3 = _SUSTAIN
#   output4 = _RELEASE

# [contour]
#   gate = _SQ3_RAW_GATE
#   attack = 0.1 * _ATTACK
#   hold = 0
#   decay = 0.1 * _DECAY
#   sustain = 0.1 * _SUSTAIN
#   release = 0.1 * _RELEASE
#   output = O8

# -------------------------------------------------
# Midi Control
# -------------------------------------------------

# [midiout]
#   pitch1 = _MIDI_CH1_PITCH
#   gate1 = G1.5
#   velocity1 = 1

# [recorder]
#   gateout1 = G1.5
#   cvin = I2
#   gatein1 = I1
#   cvout = _MIDI_CH1_PITCH
